<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!-- Generated by JAX-WS RI at http://jax-ws.dev.java.net. RI's version is 
	JAX-WS RI 2.2.4-b01. -->
<definitions targetNamespace="http://pad.polito.it/Workflow"
	name="WFControlService" xmlns="http://schemas.xmlsoap.org/wsdl/"
	xmlns:wsp="http://www.w3.org/ns/ws-policy" xmlns:tns="http://pad.polito.it/Workflow"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:wsp1_2="http://schemas.xmlsoap.org/ws/2004/09/policy"
	xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:wsam="http://www.w3.org/2007/05/addressing/metadata"
	xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">

	<!-- Schema Type -->
	<types>
		<xsd:schema>
			<xsd:import namespace="http://pad.polito.it/Workflow"
				schemaLocation="WFInfo.xsd" />
		</xsd:schema>
	</types>

	<!-- Message Process Create New process -->

	<message name="CreateNewProcessRequest">
		<part element="tns:CreateNewProcess" name="parameters" />
	</message>
	<message name="CreateNewProcessResponse">
		<part element="tns:CreateNewProcessResponse" name="parameters" />
	</message>
	<message name="ProcessAlreadyCreated">
		<part name="parameters" element="tns:ProcessAlreadyCreated" />
	</message>
	<message name="UnknownWorkflowName">
		<part name="parameters" element="tns:UnknownWorkflowName" />
	</message>

	<message name="getWorkflowRequest">
		<part name="parameters" element="tns:getWorkflow" />
	</message>
	<message name="getWorkflowResponse">
		<part name="parameters" element="tns:getWorkflowResponse" />
	</message>
	<message name="UnknownWorkflow">
		<part name="parameters" element="tns:UnknownWorkflow" />
	</message>

	<message name="getWorkflowsRequest">
		<part name="parameters" element="tns:getWorkflows" />
	</message>
	<message name="getWorkflowsResponse">
		<part name="parameters" element="tns:getWorkflowsResponse" />
	</message>


	<message name="getActionRequest">
		<part name="parameters" element="tns:getAction" />
	</message>
	<message name="getActionResponse">
		<part name="parameters" element="tns:getActionResponse" />
	</message>
	<message name="UnknownAction">
		<part name="parameters" element="tns:UnknownAction" />
	</message>


	<message name="getActionsRequest">
		<part name="parameters" element="tns:getActions" />
	</message>
	<message name="getActionsResponse">
		<part name="parameters" element="tns:getActionsResponse" />
	</message>

	<message name="getProcessRequest">
		<part name="parameters" element="tns:getProcess" />
	</message>
	<message name="getProcessResponse">
		<part name="parameters" element="tns:getProcessResponse" />
	</message>
	<message name="UnknownProcess">
		<part name="parameters" element="tns:UnknownProcess" />
	</message>

	<message name="getProcessesRequest">
		<part name="parameters" element="tns:getProcesses" />
	</message>
	<message name="getProcessesResponse">
		<part name="parameters" element="tns:getProcessesResponse" />
	</message>


	<message name="getActionStatusRequest">
		<part name="parameters" element="tns:getActionStatus" />
	</message>
	<message name="getActionStatusResponse">
		<part name="parameters" element="tns:getActionStatusResponse" />
	</message>
	<message name="UnknownStatus">
		<part name="parameters" element="tns:UnknownStatus" />
	</message>

	<message name="getActionStatusListRequest">
		<part name="parameters" element="tns:getActionStatusList" />
	</message>
	<message name="getActionStatusListResponse">
		<part name="parameters" element="tns:getActionStatusListResponse" />
	</message>


	<message name="getActorRequest">
		<part name="parameters" element="tns:getActor" />
	</message>
	<message name="getActorResponse">
		<part name="parameters" element="tns:getActorResponse" />
	</message>
	<message name="UnknownActor">
		<part name="parameters" element="tns:UnknownActor" />
	</message>


	<message name="CreateNewActionRequest">
		<part name="parameters" element="tns:CreateNewAction" />
	</message>
	<message name="CreateNewActionResponse">
		<part name="parameters" element="tns:CreateNewActionResponse" />
	</message>
	<message name="ActionAlreadyCreated">
		<part name="parameters" element="tns:ActionAlreadyCreated" />
	</message>

	<message name="TakeOverAnActionRequest">
		<part name="parameters" element="tns:TakeOverAnAction" />
	</message>
	<message name="TakeOverAnActionResponse">
		<part name="parameters" element="tns:TakeOverAnActionResponse" />
	</message>

	<message name="CompleteAnActionRequest">
		<part name="parameters" element="tns:CompleteAnAction" />
	</message>
	<message name="CompleteAnActionResponse">
		<part name="parameters" element="tns:CompleteAnActionResponse" />
	</message>
	<message name="UnknownActionType">
		<part name="parameters" element="tns:UnknownActionType" />
	</message>

	<message name="Monitor">
		<part name="parameters" element="tns:Monitor" />
	</message>
	<message name="InvalidArgument">
		<part name="parameters" element="tns:InvalidArgument" />
	</message>

	<portType name="WFControl">

		<operation name="CreateNewProcess">
			<documentation>
				Returns true if New Process is Sucessufully Created
				else false
			</documentation>
			<input message="tns:CreateNewProcessRequest" />
			<output message="tns:CreateNewProcessResponse" />
			<fault name="ProcessAlreadyCreated" message="tns:ProcessAlreadyCreated" />
			<fault name="UnknownWorkflowName" message="tns:UnknownWorkflowName" />
			<fault name="Monitor" message="tns:Monitor" />
		</operation>

		<operation name="TakeOverAnAction">
			<documentation>
				Returns true if the Action is Taken over by an Actor
			</documentation>
			<input message="tns:TakeOverAnActionRequest" />
			<output message="tns:TakeOverAnActionResponse" />

			<fault name="UnknownWorkflowName" message="tns:UnknownWorkflowName" />
			<fault name="UnknownAction" message="tns:UnknownAction" />
			<fault name="UnknownActor" message="tns:UnknownActor" />
			<fault name="Monitor" message="tns:Monitor" />
		</operation>
		<operation name="CompleteAnAction">
			<documentation>
				Returns true if the Action is completed
			</documentation>
			<input message="tns:CompleteAnActionRequest" />
			<output message="tns:CompleteAnActionResponse" />
			
			<fault name="UnknownWorkflowName" message="tns:UnknownWorkflowName" />
			<fault name="UnknownActionType" message="tns:UnknownActionType" />
			<fault name="Monitor" message="tns:Monitor" />
		</operation>
		<operation name="CreateNewAction">
			<documentation>
				Returns true if New Aciont is Sucessufully Created
				else false
			</documentation>
			<input message="tns:CreateNewActionRequest" />
			<output message="tns:CreateNewActionResponse" />
			<fault name="ActionAlreadyCreated" message="tns:ActionAlreadyCreated" />
			<fault name="Monitor" message="tns:Monitor" />
		</operation>	</portType>

	<portType name="WFInfo">
		<operation name="getWorkflow">
			<documentation>
				Returns Single Workflow given workflowName
			</documentation>
			<input message="tns:getWorkflowRequest" />
			<output message="tns:getWorkflowResponse" />

			<fault name="InvalidArgument" message="tns:InvalidArgument" />
			<fault name="UnknownWorkflow" message="tns:UnknownWorkflow" />
			<fault name="Monitor" message="tns:Monitor" />
		</operation>
		<operation name="getWorkflows">
			<documentation>
				Returns set of Workflows provided by the service
			</documentation>
			<input message="tns:getWorkflowsRequest" />
			<output message="tns:getWorkflowsResponse" />

			<fault name="InvalidArgument" message="tns:InvalidArgument" />
			<fault name="Monitor" message="tns:Monitor" />
		</operation>
		<operation name="getProcess">
			<documentation>
				Returns Processes given workflow Name
			</documentation>
			<input message="tns:getProcessRequest" />
			<output message="tns:getProcessResponse" />

			<fault name="InvalidArgument" message="tns:InvalidArgument" />
			<fault name="UnknownProcess" message="tns:UnknownProcess" />
			<fault name="Monitor" message="tns:Monitor" />
		</operation>
		<operation name="getProcesses">
			<documentation>
				Returns set of Processes provided by service
			</documentation>
			<input message="tns:getProcessesRequest" />
			<output message="tns:getProcessesResponse" />

			<fault name="InvalidArgument" message="tns:InvalidArgument" />
			<fault name="Monitor" message="tns:Monitor" />
		</operation>


		<operation name="getAction">
			<documentation>
				Returns Single Action given Action Name
			</documentation>
			<input message="tns:getActionRequest" />
			<output message="tns:getActionResponse" />

			<fault name="InvalidArgument" message="tns:InvalidArgument" />
			<fault name="UnknownAction" message="tns:UnknownAction" />
			<fault name="Monitor" message="tns:Monitor" />
		</operation>
		<operation name="getActions">
			<documentation>
				Returns set of actions provided by workflow
			</documentation>
			<input message="tns:getActionsRequest" />
			<output message="tns:getActionsResponse" />

			<fault name="InvalidArgument" message="tns:InvalidArgument" />
			<fault name="Monitor" message="tns:Monitor" />
		</operation>
		<operation name="getActionStatus">
			<documentation>
				Returns Action Status given action Name
			</documentation>
			<input message="tns:getActionStatusRequest" />
			<output message="tns:getActionStatusResponse" />

			<fault name="InvalidArgument" message="tns:InvalidArgument" />
			<fault name="UnknownStatus" message="tns:UnknownStatus" />
			<fault name="Monitor" message="tns:Monitor" />
		</operation>
		<operation name="getActionStatusList">
			<documentation>
				Returns List of Action Status provided by process
			</documentation>
			<input message="tns:getActionStatusListRequest" />
			<output message="tns:getActionStatusListResponse" />

			<fault name="InvalidArgument" message="tns:InvalidArgument" />
			<fault name="Monitor" message="tns:Monitor" />
		</operation>

		<operation name="getActor">
			<documentation>
				Returns Actor given its name and role
			</documentation>
			<input message="tns:getActorRequest" />
			<output message="tns:getActorResponse" />

			<fault name="InvalidArgument" message="tns:InvalidArgument" />
			<fault name="UnknownActor" message="tns:UnknownActor" />
			<fault name="Monitor" message="tns:Monitor" />
		</operation>
	</portType>

	<binding name="WFControlPort" type="tns:WFControl">

		<soap:binding style="document"
			transport="http://schemas.xmlsoap.org/soap/http" />
		<operation name="CreateNewProcess">

			<soap:operation soapAction="http://pad.polito.it/Workflow/CreateNewProcess" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="ProcessAlreadyCreated">

				<soap:fault use="literal" name="ProcessAlreadyCreated" />
			</fault>
			<fault name="UnknownWorkflowName">

				<soap:fault use="literal" name="UnknownWorkflowName" />
			</fault>
			<fault name="Monitor">
				<soap:fault use="literal" name="Monitor" />
			</fault>

		</operation>

		<operation name="CreateNewAction">

			<soap:operation soapAction="http://pad.polito.it/Workflow/CreateNewAction" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="ActionAlreadyCreated">
				<soap:fault use="literal" name="ActionAlreadyCreated" />
			</fault>
			<fault name="Monitor">
				<soap:fault use="literal" name="Monitor" />
			</fault>

		</operation>
		<operation name="TakeOverAnAction">

			<soap:operation soapAction="http://pad.polito.it/Workflow/TakeOverAnAction" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="UnknownWorkflowName">
				<soap:fault use="literal" name="UnknownWorkflowName" />
			</fault>
			<fault name="UnknownAction">
				<soap:fault use="literal" name="UnknownAction" />
			</fault>
			<fault name="UnknownActor">
				<soap:fault use="literal" name="UnknownActor" />
			</fault>
			<fault name="Monitor">
				<soap:fault use="literal" name="Monitor" />
			</fault>

		</operation>
		<operation name="CompleteAnAction">

			<soap:operation soapAction="http://pad.polito.it/Workflow/CompleteAnAction" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="UnknownWorkflowName">
				<soap:fault use="literal" name="UnknownWorkflowName" />
			</fault>
			<fault name="UnknownActionType">
				<soap:fault use="literal" name="UnknownActionType" />
			</fault>
			<fault name="Monitor">
				<soap:fault use="literal" name="Monitor" />
			</fault>

		</operation>

	</binding>

	<binding name="WFInfoPort" type="tns:WFInfo">

		<soap:binding style="document"
			transport="http://schemas.xmlsoap.org/soap/http" />
		<operation name="getWorkflow">

			<soap:operation soapAction="http://pad.polito.it/Workflow/getWorkflow" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InvalidArgument">
				<soap:fault use="literal" name="InvalidArgument" />
			</fault>
			<fault name="UnknownWorkflow">
				<soap:fault use="literal" name="UnknownWorkflow" />
			</fault>
			<fault name="Monitor">
				<soap:fault use="literal" name="Monitor" />
			</fault>
		</operation>
		<operation name="getWorkflows">
			<soap:operation soapAction="http://pad.polito.it/Workflow/getWorkflows" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InvalidArgument">
				<soap:fault use="literal" name="InvalidArgument" />
			</fault>
			<fault name="Monitor">
				<soap:fault use="literal" name="Monitor" />
			</fault>
		</operation>
		<operation name="getProcess">
			<soap:operation soapAction="http://pad.polito.it/Workflow/getProcess" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InvalidArgument">
				<soap:fault use="literal" name="InvalidArgument" />
			</fault>
			<fault name="UnknownProcess">
				<soap:fault use="literal" name="UnknownProcess" />
			</fault>
			<fault name="Monitor">
				<soap:fault use="literal" name="Monitor" />
			</fault>
		</operation>
		<operation name="getProcesses">
			<soap:operation soapAction="http://pad.polito.it/Workflow/getProcesses" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InvalidArgument">
				<soap:fault use="literal" name="InvalidArgument" />
			</fault>
			<fault name="Monitor">
				<soap:fault use="literal" name="Monitor" />
			</fault>
		</operation>
		<operation name="getAction">
			<soap:operation soapAction="http://pad.polito.it/Workflow/getAction" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InvalidArgument">
				<soap:fault use="literal" name="InvalidArgument" />
			</fault>
			<fault name="UnknownAction">
				<soap:fault use="literal" name="UnknownAction" />
			</fault>
			<fault name="Monitor">
				<soap:fault use="literal" name="Monitor" />
			</fault>
		</operation>
		<operation name="getActions">
			<soap:operation soapAction="http://pad.polito.it/Workflow/getActions" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InvalidArgument">
				<soap:fault use="literal" name="InvalidArgument" />
			</fault>
			<fault name="Monitor">
				<soap:fault use="literal" name="Monitor" />
			</fault>
		</operation>

		<operation name="getActionStatus">
			<soap:operation soapAction="http://pad.polito.it/Workflow/getActionStatus" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InvalidArgument">
				<soap:fault use="literal" name="InvalidArgument" />
			</fault>
			<fault name="UnknownStatus">
				<soap:fault use="literal" name="UnknownStatus" />
			</fault>
			<fault name="Monitor">
				<soap:fault use="literal" name="Monitor" />
			</fault>
		</operation>
		<operation name="getActionStatusList">
			<soap:operation soapAction="http://pad.polito.it/Workflow/getActionStatusList" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InvalidArgument">
				<soap:fault use="literal" name="InvalidArgument" />
			</fault>
			<fault name="Monitor">
				<soap:fault use="literal" name="Monitor" />
			</fault>
		</operation>
		<operation name="getActor">
			<soap:operation soapAction="http://pad.polito.it/Workflow/getActor" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InvalidArgument">
				<soap:fault use="literal" name="InvalidArgument" />
			</fault>
			<fault name="UnknownActor">
				<soap:fault use="literal" name="UnknownActor" />
			</fault>
			<fault name="Monitor">
				<soap:fault use="literal" name="Monitor" />
			</fault>
		</operation>

	</binding>
	<service name="WFControlService">
		<port binding="tns:WFControlPort" name="WFControlPort">
			<soap:address location="http://localhost:7070/wfcontrol" />
		</port>
	</service>
	<service name="WFInfoService">
		<port binding="tns:WFInfoPort" name="WFInfoPort">
			<soap:address location="http://localhost:7071/wfinfo" />
		</port>
	</service>
</definitions>
